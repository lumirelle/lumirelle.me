/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection ES6UnusedImports
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-resolver' {
  export type ParamParserCustom = never
}

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<
      '/',
      '/',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/[...404]': RouteRecordInfo<
      '/[...404]',
      '/:404(.*)',
      { 404: ParamValue<true> },
      { 404: ParamValue<false> },
      | never
    >,
    '/bookmarks': RouteRecordInfo<
      '/bookmarks',
      '/bookmarks',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/demos': RouteRecordInfo<
      '/demos',
      '/demos',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/media': RouteRecordInfo<
      '/media',
      '/media',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/notes': RouteRecordInfo<
      '/notes',
      '/notes',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/photos': RouteRecordInfo<
      '/photos',
      '/photos',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/': RouteRecordInfo<
      '/posts/',
      '/posts',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/code-style/encapsulation-and-modularity': RouteRecordInfo<
      '/posts/code-style/encapsulation-and-modularity',
      '/posts/code-style/encapsulation-and-modularity',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/code-style/symbol-name-pattern': RouteRecordInfo<
      '/posts/code-style/symbol-name-pattern',
      '/posts/code-style/symbol-name-pattern',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/first-time-trying-roller-coaster': RouteRecordInfo<
      '/posts/first-time-trying-roller-coaster',
      '/posts/first-time-trying-roller-coaster',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/categorize-your-dependencies': RouteRecordInfo<
      '/posts/manual/categorize-your-dependencies',
      '/posts/manual/categorize-your-dependencies',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/computer-network-manual': RouteRecordInfo<
      '/posts/manual/computer-network-manual',
      '/posts/manual/computer-network-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/git-manual': RouteRecordInfo<
      '/posts/manual/git-manual',
      '/posts/manual/git-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/js-advanced-grammar-manual': RouteRecordInfo<
      '/posts/manual/js-advanced-grammar-manual',
      '/posts/manual/js-advanced-grammar-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/js-pm-manual': RouteRecordInfo<
      '/posts/manual/js-pm-manual',
      '/posts/manual/js-pm-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/programming-fonts-manual': RouteRecordInfo<
      '/posts/manual/programming-fonts-manual',
      '/posts/manual/programming-fonts-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/project-create-manual': RouteRecordInfo<
      '/posts/manual/project-create-manual',
      '/posts/manual/project-create-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/manual/windows-setup-manual': RouteRecordInfo<
      '/posts/manual/windows-setup-manual',
      '/posts/manual/windows-setup-manual',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/projects': RouteRecordInfo<
      '/projects',
      '/projects',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/sponsors-list': RouteRecordInfo<
      '/sponsors-list',
      '/sponsors-list',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/use': RouteRecordInfo<
      '/use',
      '/use',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'pages/index.md': {
      routes:
        | '/'
      views:
        | never
    }
    'pages/[...404].md': {
      routes:
        | '/[...404]'
      views:
        | never
    }
    'pages/bookmarks.md': {
      routes:
        | '/bookmarks'
      views:
        | never
    }
    'pages/demos.md': {
      routes:
        | '/demos'
      views:
        | never
    }
    'pages/media.md': {
      routes:
        | '/media'
      views:
        | never
    }
    'pages/notes.md': {
      routes:
        | '/notes'
      views:
        | never
    }
    'pages/photos.md': {
      routes:
        | '/photos'
      views:
        | never
    }
    'pages/posts/index.md': {
      routes:
        | '/posts/'
      views:
        | never
    }
    'pages/posts/code-style/encapsulation-and-modularity.md': {
      routes:
        | '/posts/code-style/encapsulation-and-modularity'
      views:
        | never
    }
    'pages/posts/code-style/symbol-name-pattern.md': {
      routes:
        | '/posts/code-style/symbol-name-pattern'
      views:
        | never
    }
    'pages/posts/first-time-trying-roller-coaster.md': {
      routes:
        | '/posts/first-time-trying-roller-coaster'
      views:
        | never
    }
    'pages/posts/manual/categorize-your-dependencies.md': {
      routes:
        | '/posts/manual/categorize-your-dependencies'
      views:
        | never
    }
    'pages/posts/manual/computer-network-manual.md': {
      routes:
        | '/posts/manual/computer-network-manual'
      views:
        | never
    }
    'pages/posts/manual/git-manual.md': {
      routes:
        | '/posts/manual/git-manual'
      views:
        | never
    }
    'pages/posts/manual/js-advanced-grammar-manual.md': {
      routes:
        | '/posts/manual/js-advanced-grammar-manual'
      views:
        | never
    }
    'pages/posts/manual/js-pm-manual.md': {
      routes:
        | '/posts/manual/js-pm-manual'
      views:
        | never
    }
    'pages/posts/manual/programming-fonts-manual.md': {
      routes:
        | '/posts/manual/programming-fonts-manual'
      views:
        | never
    }
    'pages/posts/manual/project-create-manual.md': {
      routes:
        | '/posts/manual/project-create-manual'
      views:
        | never
    }
    'pages/posts/manual/windows-setup-manual.md': {
      routes:
        | '/posts/manual/windows-setup-manual'
      views:
        | never
    }
    'pages/projects.md': {
      routes:
        | '/projects'
      views:
        | never
    }
    'pages/sponsors-list.md': {
      routes:
        | '/sponsors-list'
      views:
        | never
    }
    'pages/use.md': {
      routes:
        | '/use'
      views:
        | never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
